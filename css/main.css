/* Universal Selector */

*,
*::before,
*::after {
    box-sizing: border-box;
}

.navbar{
    display: flex;
    justify-content: space-around;
    background-color: dodgerblue;
    padding: 2vw;
    position: sticky;
    top: 0;
    z-index: 1;
}

.navbar > a {
    color: white;
    text-decoration: none;
}

/* 
Box Model is made up of 4 parts: Content, Padding, Border, Margin
    Content - The content of the box, where text and images appear
    Padding - Clears an area around the content. The padding is transparent
    Border - A border that goes around the padding and content
    Margin - Clears an area outside the border. The margin is transparent
*/
.box-div {
    border: 3px solid black;
    padding: 0;
}

.box-model {
    border: 5px solid red;
    background-color: aqua;
    padding: 10px;
    margin: 10px;
}


/* Simple Selector */
/* element: grabs all of the elements base on the element name e.g h1,h2,p,div{} */
section {
    width: 90vw;
}

/* class: grabs all of the elements with the class name. begins with a dot (.) e.g. .className */
.selectors {
    border: 1px solid orange;
    padding: 0 1vw;
    margin: 1vw 0;
}

/* id: grabs the element with the id. begins with an octothorpe (#) e.g. #idName */
#simple {
    text-align: center;
    color: blue;
}

/* Combinator Selector - based on the relationship */
/* Descendant Selector - Used to match all elements that are direct descendants of a specified element */
#combo h6 {
    text-align: right;
}

/* Child Selector (>) - Used to match all elements that are direct children of a specified element. Descendant and child selectors are often used interchangably because they are very similar. The difference here though is specificity */
#combo > h6 {
    color: blue;
}
.selectors > a {
    border: 1px solid #444;
    padding: 2px;
}

/* Adjacent Sibling Selector (+) - Used to select an element that is directly after another specific element. HAS to be immediately following! */
aside + h4 {
    background-color: #ccc;
}

/* General Sibling Selector (~) - Used to select an element that is after another specific element. Has to be after! */
aside ~ h3 {
    background-color: coral;
}

/* Pseudo-class Selector - Select elements based on a certain state */
/* selector:pseudo-class{} */
/* THE ORDER MATTERS!: Hover must be after link/visited and active must come after hover */

/* unvisited link */
.selectors > a:link {
    color: red;
}

/* visited link */
.selectors > a:visited {
    color: green;
}

/* mouse over link */
#simple:hover {
    color: lightblue;
}
.selectors > a:hover {
    color: white;
    background-color: black;
}

/* selected link */
.selectors > a:active {
    color: red;
}

/* Other pseudo-class Selectors nth-child */
.child-example > p:first-of-type {
    background-color: red;
}

.child-example > p:nth-of-type(2) {
    background-color: orange;
}

.child-example > p:nth-child(3) {
    background-color: yellow;
}

.child-example > p:nth-child(4) {
    background-color: green;
}

.child-example > p:last-of-type {
    background-color: blue;
}


/* Pseudo Elements - used to style specified parts of an element */
/* selector::psuedo-element{} */
#first-line::first-line {
    color: blue;
    text-transform: uppercase;
}

/* ::before or ::after will add content before or after the content of an element */
.selectors > .pseudo-element::before {
    content: url("https://picsum.photos/100?random=10");
    display: block;
}

/* Attribute Selectors - style HTML elements that have specific attributes or attribute values */
/* selector[attribute]{} <-- mathes any element that has the attribute*/

/* CSS [attribute] Selector */
div[title] {
    text-align: center;
    border: 2px solid black;
    background-color: #eee;
    padding: 5px 10px;
    margin: 4px 0;
}

/* CSS [attribute="value"] Selector */
/* matches the value exactly */
div[title="border"] {
    text-align: right;
}


/* CSS [attribute~="value"] Selector */
/* matches the value containing a specified word */
div[title~="border"] {
    text-transform: capitalize;
}

/* CSS [attribute|="value"] Selector */
/* matches a value or a value followed by a hyphen */
div[title|="border"] {
    color: blue;
}

/* CSS [attribute^="value"] Selector */
/* matches if the value starts with the specified value */
div[title^="border"] {
    text-decoration: line-through;
}

/* CSS [attribute$="value"] Selector */
/* matches if the value ends with the specified value */
div[title$="border"] {
    background-color: rgb(203, 247, 232);
}

/* CSS [attribute*="value"] Selector */
/* matches contains the specified value */
div[title*="s"] {
    width: 35vw;
}


/* CSS DISPLAYS */
.block-level {
    border: 2px solid black;
}

.block-level h3 {
    border: 3px solid magenta;
    /* Override default display of block */
    display: inline-block;
}

#displays a {
    /* Override default display of inline */
    /* display: block; */
    color: blue;
}

#displays .show {
    border: 1px dashed red;
}

#displays .hide {
    /* Display none hides completely */
    display: none;
    /* Visibility hidden hides but leaves space */
    /* visibility: hidden; */
}

/* 
    Display: None
    Used to hide an element. Commonly used with JavaScript 
*/


/* CSS POSITIONS */
/* Default position is static and is not position in any special way */

/* position: relative - positioned relative to its normal position. Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position */
.position-border {
    border: 5px solid dodgerblue;
    width: calc(90vw - 50px);
    height: 180vh;
    position: relative;
    top: 10px;
    left: 25px;
}

/* position: fixed - positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled */
#img-1 {
    /* position: fixed; */
    top: 100px;
    left: 50px;
}

/* position: absolute -  positioned relative to the nearest positioned ancestor */
#img-2 {
    /* position: absolute; */
    top: 100px;
    left: 50px;
}

/* position: sticky -  positioned based on the user's scroll position - toggles between relative and fixed, depending on the scroll position */
#img-3 {
    position: sticky;
    top: 90px;
    left: 100px;

}